<#@ template language="C#" debug="True" hostspecific="true" #>
<#@ output extension="txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#
	string myNameSpace = "vidu01"; // Tên NameSpace
	string[] myModelList = {"Hanghoa","Khachhang"}; // Danh sách các bảng
foreach(string myModel in myModelList)
{    
	var serviceProvider = Host as IServiceProvider;
    if (serviceProvider == null)
    {
        throw new InvalidOperationException("Host is not IServiceProvider");
    }

    var dte = serviceProvider.GetService(typeof(DTE)) as DTE;
    if (dte == null)
    {
        throw new InvalidOperationException("Unable to resolve DTE");
    }

    var project = dte.Solution.Projects
                              .OfType<Project>()
                              .Single(p => p.Name == myNameSpace);

    var model = project.CodeModel
                       .CodeTypeFromFullName(String.Format("{0}.Models.{1}",myNameSpace,myModel))
                   as CodeClass;
    //might want to have a list / find all items matching some rule
	Write("var " + model.Name[0] 
        +  model.Name.Remove(0, 1).Replace("Model", "ViewModel") + "Validation" + " = {" + Environment.NewLine); 

    foreach (var property in model.Members.OfType<CodeProperty>())
    {
        var minLength = property.Attributes
                                    .OfType<CodeAttribute>()
                                    .FirstOrDefault(a => a.Name == "MinLength");
        var required = property.Attributes
                               .OfType<CodeAttribute>()
                               .FirstOrDefault(a => a.Name == "Required");

	   var pattern = property.Attributes
                               .OfType<CodeAttribute>()
                               .FirstOrDefault(a => a.Name == "RegularExpression");
        var koAttributes = new List<String>();
        if (minLength != null)
		{
			var para = minLength.Value.Split(new string[] {","},StringSplitOptions.RemoveEmptyEntries);
			var para0 = para[0].Contains("=")?para[0].Split(new string[] {"="},StringSplitOptions.RemoveEmptyEntries)[1]:para[0];
			var para1 = para[1].Contains("=")?para[1].Split(new string[] {"="},StringSplitOptions.RemoveEmptyEntries)[1]:para[1]; 
			koAttributes.Add("minLength: {params:" + para0.Trim() + ", message:"+para1.Trim() +"}");
		}
        if (required != null)
		{
			var para = required.Value.Split('=')[1];
            koAttributes.Add("required: {params: true, message:" + para + "}");
		}
		if(pattern != null)
		{
			var para = pattern.Value.Split(new string[] {","},StringSplitOptions.RemoveEmptyEntries);
			var para0 = para[0].Contains("=")?para[0].Split(new string[] {"="},StringSplitOptions.RemoveEmptyEntries)[1]:para[0];
			var para1 = para[1].Contains("=")?para[1].Split(new string[] {"="},StringSplitOptions.RemoveEmptyEntries)[1]:para[1]; 

			//Write("|Para: " + para + "Para0: " + para0 + " Para1:" + para1 + " |");
            koAttributes.Add("pattern: {params: " + para0 + ", message:" + para1 + "}");

		}
		Write(String.Format(" {0} : ko.observable().extend({{{1}}}), ",property.Name,String.Join(", ", koAttributes))+Environment.NewLine);
		
	}
	Write(Environment.NewLine + "};");
	SaveOutput(String.Format(@"ModelValidation/{0}ModelValidation.js",myModel));
}
Write("Không có gì trong này đâu :v\nVào Folder ModelValidation để tìm file tự Include lại nhé :v\n(╯°□°）╯︵ ┻━┻ ");

System.Diagnostics.Process.Start(Path.GetDirectoryName(Host.TemplateFile)+"/ModelValidation");
#>


<#+
  void SaveOutput(string outputFileName)
        {
			 if (!Directory.Exists(Path.GetDirectoryName(Host.TemplateFile) + "/ModelValidation"))
            {
                Directory.CreateDirectory(Path.GetDirectoryName(Host.TemplateFile) + "/ModelValidation");
            }
            string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
            string outputFilePath = Path.Combine(templateDirectory, outputFileName);
            File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString());

            this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
        }      
#>